package main

import (
	"cmp"
	"context"
	"fmt"
	"io"
	"log"
	"slices"
	"strings"
)

// googleSourceGitHub holds mapping of
// a Google Git repository name https://*.googlesource.com/<GoogleSourceRepo>
// to GitHub owner name https://github.com/<GitHubOwnerName>.
type googleSourceGitHub struct {
	GoogleSourceRepo string
	GitHubOwnerName  string
}

// googleGoGitHubRepos are Go Google Git repositories located at https://go.googlesource.com
// to which I have contributed.
var googleGoGitHubRepos = []googleSourceGitHub{
	{"build", "golang/build"},
	{"go", "golang/go"},
	{"net", "golang/net"},
	{"mod", "golang/mod"},
	{"protobuf", "protocolbuffers/protobuf-go"},
	{"tools", "golang/tools"},
	{"text", "golang/text"},
	{"vulndb", "golang/vulndb"},
	{"website", "golang/website"},
	{"wiki", "golang/wiki"},
}

// googleCodeGitHubRepos are Code Google Git repositories located at https://code.googlesource.com/
// to which I have contributed.
var googleCodeGitHubRepos = []googleSourceGitHub{
	{"re2", "google/re2"},
}

// additionalGitHubRepos holds GitHub repositories to which I have contributed.
// Some of them are not hosted on GitHub, but on Gerrit, and GitHub is a mirror.
var additionalGitHubRepos = []string{
	"cue-lang/cue",                   // https://review.gerrithub.io/q/project:cue-lang%252Fcue
	"cognitedata/cognite-sdk-python", // https://github.com/cognitedata/cognite-sdk-python/pull/1400
}

type Repository struct {
	OwnerName string
	StarCount int
}

type ContribPlatform interface {
	PullRequests(ctx context.Context) ([]EdgePullRequest, error)
	RepositoryStarsCount(ctx context.Context, ownerName string) (int, error)
}

func Contributions(ctx context.Context, platform ContribPlatform) ([]Repository, error) {
	allPullRequests, err := platform.PullRequests(ctx)
	if err != nil {
		return nil, fmt.Errorf("get merged pull requests: %w", err)
	}
	log.Printf("Total pull request: %d\n", len(allPullRequests))

	repositoryStars := map[string]int{}
	for _, pr := range allPullRequests {
		ownerName := string(pr.Node.Repository.NameWithOwner)
		if ownRepo(ownerName) {
			log.Printf("Skipping own repo: %s\n", ownerName)
			continue
		}
		if !pr.Node.Merged {
			log.Printf("Skipping not merged repo: %s\n", ownerName)
			continue
		}

		repositoryStars[ownerName] = int(pr.Node.Repository.StargazerCount)
	}

	getStarsCount := func(ownerName string) int {
		starsCount, err := platform.RepositoryStarsCount(ctx, ownerName)
		if err != nil {
			log.Printf("Failed to get repository %q stars: %v", ownerName, err)
			return 1000
		}
		return starsCount
	}

	fillGoogleStarsCount := func(googleRepos []googleSourceGitHub) {
		for _, googleGithub := range googleRepos {
			ownerName := googleGithub.GitHubOwnerName
			getStarsCount(ownerName)
			repositoryStars[ownerName] = getStarsCount(ownerName)
		}
	}

	fillGoogleStarsCount(googleGoGitHubRepos)
	fillGoogleStarsCount(googleCodeGitHubRepos)

	for _, ownerName := range additionalGitHubRepos {
		repositoryStars[ownerName] = getStarsCount(ownerName)
	}

	repositories := make([]Repository, 0, len(repositoryStars))
	for ownerName, star := range repositoryStars {
		repositories = append(repositories, Repository{
			OwnerName: ownerName,
			StarCount: star,
		})
	}

	return slices.SortedStableFunc(slices.Values(repositories), func(a, b Repository) int {
		return cmp.Or(
			-cmp.Compare(a.StarCount, b.StarCount),
			cmp.Compare(a.OwnerName, b.OwnerName),
		)
	}), nil
}

// ownRepo returns true if merged to my github.com/alexandear account.
func ownRepo(ownerName string) bool {
	return strings.HasPrefix(ownerName, "alexandear/")
}

// ContributionReport writes the list of repositories to out.
// Assuming WriteString never fails.
func ContributionReport(out io.StringWriter, repositories []Repository) {
	out.WriteString(`<!---
Code generated by gencontribs; DO NOT EDIT.

To update the doc:
GITHUB_TOKEN=<YOUR_TOKEN> go run .
-->

# Open Source Projects I've Ever Contributed
`)

	out.WriteString(`
## Google Go Git Repositories

_links pointed to a log with my contributions_

`)
	for _, repo := range googleGoGitHubRepos {
		line := fmt.Sprintf("* [%[1]s](https://go.googlesource.com/%[1]s/+log?author=Oleksandr%%20Redko)\n", repo.GoogleSourceRepo)
		out.WriteString(line)
	}

	out.WriteString(`
## Google Code Git Repositories

_links pointed to a log with my contributions_

`)
	for _, repo := range googleCodeGitHubRepos {
		line := fmt.Sprintf("* [%[1]s](https://code.googlesource.com/%[1]s/+log?author=Oleksandr%%20Redko)\n", repo.GoogleSourceRepo)
		out.WriteString(line)
	}

	out.WriteString(`
## GitHub Projects

_sorted by stars descending_

`)
	for _, repo := range repositories {
		line := fmt.Sprintf("* [%[1]s](https://github.com/%[1]s/commits?author=alexandear)\n", repo.OwnerName)
		out.WriteString(line)
	}
}
